<?php

function kostym_init(){
  // Auto add libraries defined in kostym.libraries.json in theme and set to auto-add
  $libraries = drupal_get_library('kostym');

  if($libraries){
    foreach( $libraries as $library_name => $library_info){
      if(!empty($library_info['auto-add']) && !empty($library_info['theme']) && $library_info['theme'] == $GLOBALS['theme_key']){
        drupal_add_library('kostym', $library_name);
      }
    }
  }

  // Auto enable kostym component modules on cache clear
  if(!($cache = cache_get('kostym_all_components_enabled'))){

    $component_modules_to_enable = array();
    foreach(list_themes() as $theme_key => $theme_info){
      $theme_path = drupal_get_path('theme', $theme_key);
      foreach(kostym_find_component_modules_in_theme($theme_path) as $component_info){

        if(!module_exists($component_info->name)){
          $component_modules_to_enable[] = $component_info->name;
        }

      };
    }

    if($component_modules_to_enable){
      module_enable($component_modules_to_enable);
      drupal_set_message('These kostym component modules have been enabled: <b>' . implode(', ', $component_modules_to_enable) . '</b>');
    }

    cache_set('kostym_all_components_enabled', TRUE);
  };
}

/**
 * Parse kostym.libraries.json (in theme) and add them as hook_library definitions.
 */
function kostym_library() {

  if ($cached = cache_get('kostym_libraries')) {
    $kostym_libraries = $cached->data;
    return $kostym_libraries;
  }

  $kostym_libraries = array();
  $libraries_path = drupal_get_path('profile', drupal_get_profile()) . '/libraries';

  foreach(kostym_list_themes() as $theme_key => $theme_info){
    $json_path = DRUPAL_ROOT . '/' . $theme_info->path . '/kostym_components/kostym.libraries.json';

    if(file_exists($json_path) && $current_theme_libraries = json_decode(file_get_contents($json_path), TRUE)) {
      $kostym_libraries += $current_theme_libraries;

      foreach($kostym_libraries as $kostym_library_name =>  &$kostym_library){
        $kostym_library['title'] = $kostym_library_name;
        $kostym_library['version'] = '';
        $kostym_library['theme'] = $theme_key;

        if(!isset($kostym_library['auto-add'])){
          drupal_set_message('Please add the boolean "<strong>auto-add</strong>" property to the <strong>' . $kostym_library_name . '</strong> library in: <strong>' . $json_path . '</strong>', 'warning');
        }

        foreach(array('js', 'css') as $key){
          if(isset($kostym_library[$key])){
            foreach($kostym_library[$key] as $file_path => $file_info){
              unset($kostym_library[$key][$file_path]);
              $kostym_library[$key][$libraries_path . '/' . $file_path] = $file_info;
            }
          }
        }
      }
    }
  }

  cache_set('kostym_libraries', $kostym_libraries);

  return $kostym_libraries;
}

/**
 * Helper function to find component modules in a theme
 */
function kostym_find_component_modules_in_theme($theme_path){
  return file_scan_directory($theme_path . '/kostym_components', '/^' . DRUPAL_PHP_FUNCTION_PATTERN . '\.module$/', array('key' => 'name'));
}

/**
 * Make it possible for component modules to define theme overrides (including preprocess and process functions).
 */
function kostym_theme_registry_alter(&$theme_registry) {

  if(file_exists(DRUPAL_ROOT . '/' . $GLOBALS['theme_path'] . '/kostym_components')){
    if($componentsInfo = kostym_find_component_modules_in_theme($GLOBALS['theme_path'])){
      foreach($theme_registry as $theme_hook => $theme_hook_info){
        foreach(array_keys($componentsInfo) as $component_name){

          $override_function = $component_name . '_' . $theme_hook;
          if(function_exists($override_function)) {

            $theme_registry[$theme_hook]['function'] = $override_function;
            $theme_registry[$theme_hook]['theme path'] = drupal_get_path('module', $component_name);

            $registry_row['preprocess functions'] = array();
            $registry_row['process functions'] = array();

          }

          $override_preprocess = $component_name . '_preprocess_' . $theme_hook;
          if(function_exists($override_preprocess)) {

            $theme_registry[$theme_hook]['preprocess functions'] = array();
            $theme_registry[$theme_hook]['preprocess functions'][] = $override_preprocess;

          }

          $override_process = $component_name . '_process_' . $theme_hook;
          if(function_exists($override_process)) {

            $theme_registry[$theme_hook]['process functions'] = array();
            $theme_registry[$theme_hook]['process functions'][] = $override_process;

          }

        }
      }
    }
  }

}

/**
 * Auto add ctools and panels plugins defined in kostym components
 */
function kostym_ctools_plugin_directory($module, $plugin_type) {
  if ($module == 'ctools' || $module == 'panels') {
    foreach(kostym_list_themes() as $theme_key => $theme_info){
      $theme_path = $theme_info->path;
      $theme_kostym_component_path = $theme_path . '/kostym_components';
      $kostym_component_plugins = array();

      $results = scandir($theme_kostym_component_path);
      foreach ($results as $result) {
        if ($result === '.' or $result === '..') {
          continue;
        }
        if (is_dir($theme_kostym_component_path . '/' . $result)) {
          $kostym_component_plugins[$theme_key . '_' . $result] = $theme_kostym_component_path . '/' . $result . '/' . $module . '-' . $plugin_type;
        }
      }

      return $kostym_component_plugins;
    }
  }
}

/**
 * Retrun all active themes that uses kostym components
 */
function kostym_list_themes(){
  $kostym_themes = &drupal_static(__FUNCTION__);

  if (!isset($kostym_themes)) {
    $all_themes = list_themes();
    foreach ($all_themes AS $theme_key => $theme_info) {
      if (!empty($theme_info->status)) {
        $theme_path = drupal_get_path('theme', $theme_key);
        if (file_exists(DRUPAL_ROOT . '/' . $theme_path . '/kostym_components')) {
          $theme_info->path = $theme_path;
          $kostym_themes[$theme_key] = $theme_info;
        }
      }
    }
  }

  return $kostym_themes;
}
